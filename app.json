[{"name": "app.py", "content": "from shiny import App, ui, render, reactive\nimport asyncio\n\napp_ui = ui.page_fluid(\n    ui.div(\n        {\"class\": \"header-container\"},\n        ui.h2(\"Biomechanics Tutor\", class_=\"main-header\"),\n    ),\n    # Horizontal layout with all controls in one row\n    ui.div(\n        {\"class\": \"control-panel\"},\n        ui.tags.label(\"Select topic\", class_=\"control-label\"),\n        ui.input_select(\n            \"swf_file\",\n            None,\n            {\n                \"\": \"Select Topic\",  # Added default option\n                \"PM.swf\": \"PM\",\n                # Add more SWF files here if needed\n            },\n            selected=\"\"  # Set default selection\n        ),\n    ),\n    ui.row(\n        ui.column(12,\n            ui.output_ui(\"swf_container\"),\n        )\n    ),\n    # Updated CSS with thinner header and reduced spacing\n    ui.tags.style(\"\"\"\n        .header-container {\n            background: linear-gradient(135deg, #2c3e50, #3498db);\n            padding: 10px;  /* Reduced from 20px */\n            margin-bottom: 15px;  /* Reduced from 30px */\n            border-radius: 8px;  /* Reduced from 10px */\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);  /* Reduced shadow */\n        }\n        \n        .main-header {\n            color: white;\n            margin: 0;\n            font-size: 2em;  /* Reduced from 2.5em */\n            font-weight: 600;\n            text-align: center;\n            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);  /* Reduced shadow */\n            font-family: 'Helvetica Neue', Arial, sans-serif;\n        }\n        \n        .control-panel {\n            display: flex;\n            align-items: flex-start;\n            gap: 15px;\n            padding: 12px;  /* Reduced from 15px */\n            background-color: #f8f9fa;\n            border-radius: 8px;\n            margin-bottom: 15px;  /* Reduced from 20px */\n        }\n        \n        .control-label {\n            font-size: 16px;\n            color: #495057;\n            font-weight: 500;\n            margin: 0;\n            white-space: nowrap;\n            padding-top: 6px;\n        }\n        \n        .selectInput {\n            flex-grow: 1;\n            max-width: 400px;\n        }\n        \n        #swf-player {\n            width: 100%;\n            position: relative;\n            padding-top: 75%; /* 4:3 Aspect Ratio */\n            background-color: white;\n        }\n        #swf-player ruffle-player {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100% !important;\n            height: 100% !important;\n            background-color: white;\n            border: none;\n        }\n        #swf-player embed {\n            width: 100% !important;\n            height: 100% !important;\n            background-color: white;\n        }\n    \"\"\"),\n    # Rest of the code remains the same\n    ui.tags.script(src=\"https://unpkg.com/@ruffle-rs/ruffle/ruffle.js\"),\n    ui.tags.script(\"\"\"\n    document.addEventListener('DOMContentLoaded', (event) => {\n        window.RufflePlayer = window.RufflePlayer || {};\n        window.addEventListener('load', (event) => {\n            window.rufflePlayer = window.RufflePlayer.newest();\n        });\n    });\n\n    window.loadSWF = async function(swf_url) {\n        console.log(\"loadSWF called with URL:\", swf_url);\n        \n        // Wait for Ruffle to be ready\n        while (!window.rufflePlayer) {\n            await new Promise(resolve => setTimeout(resolve, 100));\n        }\n        \n        const container = document.getElementById(\"swf-player\");\n        if (!container) {\n            console.error(\"SWF container not found\");\n            return;\n        }\n        \n        // Clear existing content\n        container.innerHTML = '';\n        \n        // If no URL (empty selection), just return\n        if (!swf_url) {\n            return;\n        }\n        \n        try {\n            const player = window.rufflePlayer.createPlayer();\n            container.appendChild(player);\n            await player.load({\n                url: swf_url,\n                allowScriptAccess: true,\n                backgroundColor: \"#FFFFFF\",\n                scale: \"showAll\"  // Added scale mode\n            });\n            \n            // Player will inherit container dimensions\n            player.style.width = '100%';\n            player.style.height = '100%';\n            player.style.position = 'absolute';\n            player.style.top = '0';\n            player.style.left = '0';\n            player.style.backgroundColor = 'white';\n        } catch (e) {\n            console.error(\"Error loading SWF:\", e);\n            container.innerHTML = 'Error loading SWF: ' + e.message;\n        }\n    };\n\n    // Add Shiny message handler\n    Shiny.addCustomMessageHandler(\"loadSWF\", function(swf_url) {\n        window.loadSWF(swf_url);\n    });\n    \"\"\"),\n)\n\ndef server(input, output, session):\n    @render.ui\n    def swf_container():\n        return ui.HTML(\"<div id='swf-player'></div>\")\n\n    @reactive.effect\n    @reactive.event(input.swf_file)\n    async def _():\n        swf_file = input.swf_file()\n        if swf_file:\n            from urllib.parse import quote\n            encoded_file = quote(swf_file)\n            swf_url = f\"https://mklimstra.github.io/Biomech-tutor/swf/{encoded_file}\"\n            await session.send_custom_message(\"loadSWF\", swf_url)\n        else:\n            await session.send_custom_message(\"loadSWF\", \"\")\n\napp = App(app_ui, server)\n", "type": "text"}]